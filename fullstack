

2) Design a protected route/result that only logged-in students can access
. Use session middleware to verify if student is logged in.
. If valid, show:"Hi [name],your results are available!
. If not, return:"Access denied:Please login to view results".
. Add a /logout route to destroy the session and clear the cookie.
------
app.js:
const express = require('express');
const session = require('express-session');
const app = express();

app.use(express.json());

app.use(session({
  secret: 'your-secret-key',
  resave: false,
  saveUninitialized: false,
  cookie: { secure: false }
}));

app.post('/login', (req, res) => {
  const { name } = req.body;
  if (!name) return res.status(400).send('Please provide your name');

  req.session.student = { name };
  res.send(`Logged in as ${name}`);
});

app.get('/results', (req, res) => {
  if (req.session.student && req.session.student.name) {
    res.send(`Hi ${req.session.student.name}, your results are available!`);
  } else {
    res.status(401).send('Access denied: Please login to view results');
  }
});

app.get('/logout', (req, res) => {
  req.session.destroy(err => {
    if (err) {
      return res.status(500).send('Error logging out');
    }
    res.clearCookie('connect.sid');
    res.send('Logged out successfully');
  });
});

const PORT = 3000;
app.listen(PORT, () => {
  console.log(`Server running on http://localhost:${PORT}`);
});
--------------------------------------------------------------------------------------------
3) Build a course enrollment route/courses with GET and POST
. Use GET/courses to return a list of available courses(only if logged in)
. Use POST /courses to enroll the logged-in student into a course.
.On successful enrollment,create a cookie named lastEnrolledCourse(valid for 2mins).
. Add error handlingfor:
  ..  Trying to enroll without being logged in
  ..  Enrolling in a course already taken
------------------------
app.js:
-----
const express = require('express');
const cookieParser = require('cookie-parser');
const app = express();

app.use(express.json());
app.use(cookieParser());

const courses = [
  { id: 'c1', name: 'Math 101' },
  { id: 'c2', name: 'Physics 101' },
  { id: 'c3', name: 'History 101' }
];

const enrolledByUser = {};

function authMiddleware(req, res, next) {
  const userId = req.headers['x-user-id'];
  if (!userId) {
    return res.status(401).json({ error: 'Not logged in' });
  }
  req.userId = userId;
  if (!enrolledByUser[userId]) enrolledByUser[userId] = [];
  next();
}

app.get('/courses', authMiddleware, (req, res) => {
  res.json(courses);
});

app.post('/courses', authMiddleware, (req, res) => {
  const userId = req.userId;
  const { courseId } = req.body;

  if (!courseId) {
    return res.status(400).json({ error: 'courseId is required' });
  }

  const course = courses.find(c => c.id === courseId);
  if (!course) {
    return res.status(404).json({ error: 'Course not found' });
  }

  if (enrolledByUser[userId].includes(courseId)) {
    return res.status(400).json({ error: 'Already enrolled in this course' });
  }

  enrolledByUser[userId].push(courseId);

  res.cookie('lastEnrolledCourse', courseId, { maxAge: 2 * 60 * 1000, httpOnly: true });

  res.json({ message: `Enrolled in ${course.name} successfully!` });
});

const PORT = 3000;
app.listen(PORT, () => {
  console.log(`Server listening on http://localhost:${PORT}`);
});
----------------------------
