3.	Design and implement an Express.js application to manage a list of books. Each book must have an id, title, and author. Initialize the application with at least two predefined books stored in an in-memory array. The application must support the following functionalities:

a.	The GET /books route should return the list of all books.
b.	The POST /books route should accept a new book's title and author in the request body, assign it a unique id, add it to the array, and return a confirmation message.
c.	The PUT /books/:id route should update an existing book’s title and/or author based on the id provided in the URL. Only the fields present in the request body should be updated. If the book is not found, return a 404 status with an appropriate message.
d.	The DELETE /books/:id route should remove a book by its id. If the book does not exist, return a 404 error. Otherwise, return a success message indicating which book was deleted.
e.	Ensure proper use of express.json() middleware and return all responses in plain text format using res.send().
------------------------

const express = require('express');
const app = express();
const port = 3000;

// Middleware to parse JSON bodies
app.use(express.json());

// In-memory book list initialized with two books
let books = [
  { id: 1, title: "1984", author: "George Orwell" },
  { id: 2, title: "To Kill a Mockingbird", author: "Harper Lee" }
];
---------------------------------------------------------------------------------------------------
5.	Create an Express.js application to simulate a simple task management system. Each task should have an id, title, description, and a status field (e.g., “pending”, “in-progress”, “completed”). Initialize the application with at least two tasks in an in-memory array.

a.	The application must implement the following functionality using appropriate HTTP methods:
b.	GET /tasks: Return the list of all tasks.
c.	GET /tasks/:id: Return details of a task by its ID.
d.	POST /tasks: Accept a new task's title and description from the request body, assign a unique ID, default the status to “pending”, and add it to the array.
e.	PUT /tasks/:id: Allow the user to update any of the task fields (title, description, or status). Only the provided fields should be updated.
f.	DELETE /tasks/:id: Remove a task by its ID. If the task doesn't exist, return a 404 error.
g.	Ensure use of express.json() middleware for parsing input, and use res.send() for all output messages.


import express from 'express';
const app = express();
const PORT = 3000;
// Use JSON middleware
app.use(express.json());

// In-memory task array with initial data
let tasks = [
  { id: 1, title: 'Learn Express', description: 'Study basic Express.js routing', status: 'pending' },
  { id: 2, title: 'Buy Groceries', description: 'Milk, Bread, Eggs', status: 'in-progress' }
];

// Generate unique IDs
let nextId = 3;

// GET /tasks – return all tasks
app.get('/tasks', (req, res) => {
  res.send(tasks);
});

// GET /tasks/:id – return a task by ID
app.get('/tasks/:id', (req, res) => {
  const id = parseInt(req.params.id);
  const task = tasks.find(t => t.id === id);
  if (!task) return res.status(404).send('Task not found');
  res.send(task);
});

// POST /tasks – create a new task
app.post('/tasks', (req, res) => {
  const { title, description } = req.body;
  if (!title || !description) {
    return res.status(400).send('Title and description are required');
  }

  const newTask = {
    id: nextId++,
    title,
    description,
    status: 'pending'
  };
  tasks.push(newTask);
  res.send(newTask);
});

// PUT /tasks/:id – update task fields
app.put('/tasks/:id', (req, res) => {
  const id = parseInt(req.params.id);
  const task = tasks.find(t => t.id === id);
  if (!task) return res.status(404).send('Task not found');

  const { title, description, status } = req.body;

  if (title !== undefined) task.title = title;
  if (description !== undefined) task.description = description;
  if (status !== undefined) task.status = status;

  res.send(task);
});

// DELETE /tasks/:id – delete a task
app.delete('/tasks/:id', (req, res) => {
  const id = parseInt(req.params.id);
  const index = tasks.findIndex(t => t.id === id);
  if (index === -1) return res.status(404).send('Task not found');

  const deletedTask = tasks.splice(index, 1)[0];
  res.send(deletedTask);
});

// Start server
app.listen(PORT, () => {
  console.log(`Server is running on http://localhost:${PORT}`);
});

/*
GET /books — lists all books (in plain text)

POST /books with JSON body { "title": "...", "author": "..." } — adds a book

PUT /books/:id with JSON body (any of {title, author}) — updates a book partially

DELETE /books/:id — deletes a book by ID*/
---------------------------------------------------------------------------------------
3. Create a New Request in Postman
Click New > HTTP Request or just open a new tab.

4. Test API Endpoints
a) GET all tasks
Method: GET

URL: http://localhost:3000/tasks

Click Send

You should get a JSON array of all tasks.

b) GET a task by ID
Method: GET

URL: http://localhost:3000/tasks/1 (replace 1 with any task ID)

Click Send

You’ll get the task with ID=1 or a 404 error if not found.

c) POST a new task
Method: POST

URL: http://localhost:3000/tasks

Go to Body tab > select raw > choose JSON from dropdown

Enter JSON data like:

json
Copy
Edit
{
  "title": "New Task",
  "description": "This is a new task description"
}
Click Send

You’ll get the newly created task back with id and default status: "pending".

d) PUT to update a task
Method: PUT

URL: http://localhost:3000/tasks/1 (replace 1 with your task ID)

Body > raw > JSON, e.g.:

json
Copy
Edit
{
  "status": "completed",
  "description": "Updated description"
}
Click Send

Only provided fields are updated.

e) DELETE a task
Method: DELETE

URL: http://localhost:3000/tasks/1 (replace 1 with task ID)

Click Send

You’ll get the deleted task returned or a 404 if the task wasn’t found.

// Helper to get next unique ID
const getNextId = () => (books.length > 0 ? books[books.length - 1].id + 1 : 1);

// a. GET /books - return all books
app.get('/books', (req, res) => {
  // Format response as plain text listing all books
  const responseText = books
    .map(b => `ID: ${b.id}, Title: "${b.title}", Author: ${b.author}`)
    .join('\n') || 'No books found.';
  res.send(responseText);
});

// b. POST /books - add new book with title & author
app.post('/books', (req, res) => {
  const { title, author } = req.body;

  if (!title || !author) {
    return res.status(400).send('Error: Both title and author are required.');
  }

  const newBook = { id: getNextId(), title, author };
  books.push(newBook);

  res.send(`Book added successfully: ID ${newBook.id}, Title "${newBook.title}", Author ${newBook.author}`);
});

// c. PUT /books/:id - update title and/or author
app.put('/books/:id', (req, res) => {
  const id = parseInt(req.params.id);
  const { title, author } = req.body;

  const book = books.find(b => b.id === id);

  if (!book) {
    return res.status(404).send(`Book with ID ${id} not found.`);
  }

  if (title !== undefined) book.title = title;
  if (author !== undefined) book.author = author;

  res.send(`Book with ID ${id} updated successfully.`);
});

// d. DELETE /books/:id - delete a book by ID
app.delete('/books/:id', (req, res) => {
  const id = parseInt(req.params.id);
  const index = books.findIndex(b => b.id === id);

  if (index === -1) {
    return res.status(404).send(`Book with ID ${id} not found.`);
  }

  const deletedBook = books.splice(index, 1)[0];

  res.send(`Deleted book: ID ${deletedBook.id}, Title "${deletedBook.title}", Author ${deletedBook.author}`);
});

// Start the server
app.listen(port, () => {
  console.log(`Books app listening at http://localhost:${port}`);
});


/*
GET /books — lists all books (in plain text)

POST /books with JSON body { "title": "...", "author": "..." } — adds a book

PUT /books/:id with JSON body (any of {title, author}) — updates a book partially

DELETE /books/:id — deletes a book by ID*/
-------------------------------------------------------------------------------------------
4.	Develop an Express.js application that provides basic functionality for managing student records. Each student should have an id, name, and course. Initialize the application with at least three student records in an in-memory array. The application must implement the following:
a.	The route GET /students should return a list of all students.
b.	The route GET /students/:id should return details of a single student based on the ID provided in the URL.
c.	The route POST /students should accept a new student's name and course via the request body, assign a unique ID, add the student to the array, and return a message confirming the addition.
d.	The route PUT /students/:id should update the student’s name and/or course for the given ID. If the student does not exist, the server should return a 404 error.
e.	The route DELETE /students/:id should remove a student from the list and return the details of the deleted student.
f.	Use express.json() middleware to parse JSON input, and use res.send() for all output. Ensure appropriate status codes and messages are used for both success and error responses.
---------------------
import express from 'express';
const app = express();
const port = 3000;

app.use(express.json());

let students = [
  { id: 1, name: 'Anup', course: 'Math' },
  { id: 2, name: 'Meera', course: 'Physics' },
  { id: 3, name: 'kia', course: 'Chemistry' },
];

const getNextId = () => {
  return students.length ? Math.max(...students.map(s => s.id)) + 1 : 1;
};

// a. GET /students 
app.get('/students', (req, res) => {
  res.send(students);
});

// b. GET /students/:id 
app.get('/students/:id', (req, res) => {
  const id = parseInt(req.params.id);
  const student = students.find(s => s.id === id);

  if (!student) {
    return res.status(404).send({ message: `Student with ID ${id} not found.` });
  }

  res.send(student);
});

// c. POST /students
app.post('/students', (req, res) => {
  const { name, course } = req.body;

  if (!name || !course) {
    return res.status(400).send({ message: 'Name and course are required.' });
  }

  const newStudent = {
    id: getNextId(),
    name,
    course,
  };

  students.push(newStudent);
  res.status(201).send({ message: 'Student added successfully.', student: newStudent });
});

// d. PUT /students/:id 
app.put('/students/:id', (req, res) => {
  const id = parseInt(req.params.id);
  const { name, course } = req.body;
  const studentIndex = students.findIndex(s => s.id === id);

  if (studentIndex === -1) {
    return res.status(404).send({ message: `Student with ID ${id} not found.` });
  }

  if (name) students[studentIndex].name = name;
  if (course) students[studentIndex].course = course;

  res.send({ message: 'Student updated successfully.', student: students[studentIndex] });
});

// e. DELETE /students/:id 
app.delete('/students/:id', (req, res) => {
  const id = parseInt(req.params.id);
  const studentIndex = students.findIndex(s => s.id === id);

  if (studentIndex === -1) {
    return res.status(404).send({ message: `Student with ID ${id} not found.` });
  }

  const removedStudent = students.splice(studentIndex, 1)[0];
  res.send({ message: 'Student deleted successfully.', student: removedStudent });
});

app.listen(port, () => {
  console.log(`Student management app listening at http://localhost:${port}`);
});
