2. Countries and capitals
new1.jsx:
========
import React from "react";
import './App.css';


const Countries=[
    {name:"Canada" , capital:"Ottawa"},
    {name:"India" , capital:"Delhi"},
    {name:"Japan" , capital:"Tokyo"},
];
const New1 = ()=>(
    <div className="Country">
        <ul>
            {Countries.map((country,index)=>(
                <li key = {index}>
                <strong> {country.name}</strong>:{country.capital}</li>

            ))}</ul>
    </div>
);
export default New1;
----
App.js:
import React from 'react';
import './App.css';
import New1 from "./new1";


function App(){
  return(
    <div className="App">
      <h1>Countries and capitals</h1>
    <New1/>
    </div>
  );
}
export default App;
---
App.css:
.Country{
    font-family: Arial, sans-serif;
    margin:20px;
}
.Country li{
    background-color: white;
    padding:10px;
    border-radius: 5px;
    margin-bottom: 5px;
}
.Country li strong{
    color:pink;
}
.New1{
    border: 2px solid black;
}
-----------------------------------------------------------
6. Prop Validation:
-------------------
App.js:
import React from 'react';
import PropTypes from 'prop-types';
class App extends React.Component {
    render() {
        return (
            <div>
                <h2>Simple ReactJS Props validation example</h2>
                <table>
                    <tr>
                        <th>Type</th>
                        <th>Value</th>
                        <th>Valid</th>
                    </tr>
                    <tr>
                        <td>Array</td>
                        <td>{this.props.propArray}</td>
                        <td>{this.props.propArray ? "true" : "False"}</td>
                    </tr>
                    <tr>
                        <td>Boolean</td>
                        <td>{this.props.propBool ? "true" : "False"}</td>
                        <td>{typeof this.props.propBool ? "true" : "False"}</td>
                    </tr>
                    <tr>
                        <td>Function</td>
                        <td>{this.props.propFunc(5)}</td>
                        <td>{this.props.propFunc(5) ? "true" : "False"}</td>
                    </tr>
                    <tr>
                        <td>String</td>
                        <td>{this.props.propString}</td>
                        <td>{typeof this.props.propString ? "true" : "False"}</td>
                    </tr>
                    <tr>
                        <td>Number</td>
                        <td>{this.props.propNumber}</td>
                        <td>{ typeof this.props.propNumber ? "true" : "False"}</td>
                    </tr>
                </table>
            </div>
        );
    }
}

App.propTypes = {
    propArray: PropTypes.array.isRequired,
    propBool: PropTypes.bool.isRequired,
    propFunc: PropTypes.func,
    propNumber: PropTypes.number,
    propString: PropTypes.string,
}

App.defaultProps = {
    propArray: [1, 2, 3, 4, 5],
    propBool: true,
    propFunc: function (x) { return x * 10 },
    propNumber: 100,
    propString: "GFG",
}

export default App;
-----------------------------------
1. Vehicle
vehicle.jsx:
import React from "react";

function Vehicle(){
    const layout={
        width:"250 px",
        color: "black",
        backgroundColor:"lightgrey",
        textalign:"center",
        padding:"10px",
        border:"1px solid black",
        borderRadius:"10px",
    };
    
    return(
        <table style = {{borderspacing:"10 px"}}>
            <tr>
                <td style={layout}>
                    <h3>Vehicle information</h3>
                    <p><b>model:</b>Innova</p>
                    <p><b>manufacturer:</b>Toyota</p>
                    <p><b>year:</b>2000</p>
                    <p><b>fuel type:</b>petrol</p>
                    </td>

                 <td style={layout}>
                   <h3>Vehicle information</h3>
                    <p><b>model:</b>Tata Tiago</p>
                    <p><b>manufacturer:</b>Tata</p>
                    <p><b>year:</b>2001</p>
                    <p><b>fuel type:</b>Diesel</p>
                    </td>

                    <td style={layout}>
                    <h3>Vehicle information</h3>
                    <p><b>model:</b>Skoda</p>
                    <p><b>manufacturer:</b>xyz</p>
                    <p><b>year:</b>2002</p>
                    <p><b>fuel type:</b>petrol</p>
                    </td>

                    <td style={layout}>
                    <h3>Vehicle information</h3>
                    <p><b>model:</b>Swift</p>
                    <p><b>manufacturer:</b>abc</p>
                    <p><b>year:</b>2003</p>
                    <p><b>fuel type:</b>diesel</p>
                    </td>

                    <td style={layout}>
                    <h3>Vehicle information</h3>
                    <p><b>model:</b>Toyota</p>
                    <p><b>manufacturer:</b>gef</p>
                    <p><b>year:</b>2004</p>
                    <p><b>fuel type:</b>petrol</p>
                    </td>
                    </tr>
                    </table>           
    );
}
export default Vehicle;
---
App.js:
import React from "react";
import Vehicle from './vehicle';

function App(){
  return(
    <div>
      <Vehicle/>
    </div>
  );
}
export default App;
-------------------------------------------------
3. Restaurants items
Greetings.jsx:
import React from "react";
function Greetings() {
  return (
    <div>
      <h1>Welcome to my Restaurant</h1>
    </div>
  );
}

export default Greetings;
-----
App.js:
import React from "react";
import Greetings from "./greetings";
const App = () => {
  const restaurants = [
    {
      id: 1,
      name: "Albek",
      items: [
        { id: "p1", name: "Fried Rice", price: "100" },
        { id: "p2", name: "Biriyani", price: "200" },
      ],
    },
  ];

  return (
    <div>
      <Greetings />
      <h2>Restaurants List</h2>
      <ul>
        {restaurants.map((restaurant) => (
          <li key={restaurant.id}>
            <h3>{restaurant.name}</h3>
            <ol>
              {restaurant.items.map((item) => (
                <li key={item.id}>
                  <strong>{item.name}</strong>: â‚¹{item.price}
                </li>
              ))}
            </ol>
          </li>
        ))}
      </ul>
    </div>
  );
};

export default App;
-----------------------------------------------------------------------------
4. Coursecard.jsx:
import { Component } from "react";
import React from "react";
import propTypes from "prop-types";

class CourseCard extends Component{
    render()
    {
        const{courseTitle,duration,instructorName}=this.props;
        return(
            <div>
                <h3>Course Title:{courseTitle}</h3>
                <p>Duration:{duration}</p>
                <p>InstructorName:{instructorName}</p>
            </div>
        );
    }
}
CourseCard.propTypes={
    courseTitle : propTypes.string.isRequired,
    duration : propTypes.number.isRequired,
    instructorName : propTypes.string.isRequired,
};
export default CourseCard;
--------------
App.js:
import React from "react";
import CourseCard from "./Coursecard";

function App(){
  return(
    <div className="App">
      <CourseCard courseTitle = "React.js" duration={3} instructorName="ABC">
      </CourseCard>
    </div>
  );
}
export default App;
--------------------------------------------------------------
5. App.js:
import React from "react";
import './App.css';

const landmarks = [
  { name: "Eiffel Tower", location: "Paris", country: "France" },
  { name: "Statue of Liberty", location: "New York", country: "USA" },
  { name: "Taj Mahal", location: "Agra", country: "India" }
];

const App = () => {
  return (
    <div className="App">
      <div className="landmark">
        <h1>Welcome to this page</h1>
        <p>Explore the landmarks.</p>
        <div className="landmark-grid">
          {landmarks.map((landmark, index) => (
            <div key={index} className="landmark-item">
              <h3>{landmark.name}</h3>
              <h4>{landmark.location}</h4>
              <h5>{landmark.country}</h5>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
};

export default App;
----
App.css:
.App {
  font-family: Arial, sans-serif;
  padding: 20px;
  text-align: center;
}
.landmark {
  margin-top: 20px;
}
.landmark-grid {
  display: grid;
  grid-template-columns: 1fr;
  gap: 20px;
  margin-top: 20px;
  padding: 10px;
}
.landmark-item {
  border: 2px solid red;
  padding: 15px;
  border-radius: 8px;
  transition: transform 0.2s ease;
  background-color:lightgray;
}
.landmark-item:hover {
  transform: scale(1.05);
  border-color: blue;
}
------------
26-05-25
forms:
Greetings.jsx:
import React from "react";
import { useState } from "react";

function Op(){
    let [name,setName]=useState("");

    let hState=(e)=>{
        e.preventDefault();
        console.log("submitted name",name);
        setName("");
    }
    return(
        <form onSubmit={hState}>
            <input type="text" onChange={(e)=>setName(e.target.value)} />
            <input type="button" value="submit" />
            </form>
    );
}

export default Op;
-----
App.js
import React from 'react';
import Op from './Greeting'

function App(){
  return(
   <Op></Op>
  );
}
export default App;
------------
Contactform- Greeting.jsx:
import React, { useState }from 'react';
const ContactForm = () => {
const [email, setEmail]= useState('');
const [message, setMessage]= useState('');
const handleSubmit = (e) => {
    e.preventDefault();
    alert(`Submitted: ${email} - ${message}`);
};
return(
    <form onSubmit={handleSubmit}>
        <label>Email:</label>
        <input
          type="email"
          value={email}
          onChange={(e) => setEmail(e.target.value)} /><br />
          <label>Message:</label>
          <textarea
           value={message}
           onChange={(e) => setMessage(e.target.value)}></textarea><br />
           <button type="submit">Send</button>
           </form>
);
}
export default ContactForm;
App.js:
import React from 'react';
import ContactForm from './Greeting'

function App(){
  return(
   <ContactForm/>
  );
}
export default App;
------------------------------------------
login form:
import React, { useState }from 'react';
import './App.css';

const LoginForm = () => {
const [username, setUsername]= useState('');
const [password, setPassword]= useState('');
const [show,setShow]= useState(false);
const toggleShow = () => setShow(!show);

const handleSubmit = (e) => {
   
    alert(`Logging in as: ${username}` );
};
return(
    <form onSubmit={handleSubmit}>
        <label>Username:</label>
        <input
          type="text"
          value={username}
          onChange={(e) => setUsername(e.target.value)} /><br />
          <label>Password:</label>
        <input
          type={show ? 'text' : 'password'}
          value={password}
          onChange={(e) => setPassword(e.target.value)} /><br />

            
            <button type="button" onClick={toggleShow}>{show ? 'Hide' : 'Show'}</button>
            </form>
);
}
export default LoginForm;

App.js:
import React from 'react';
import LoginForm from './Greeting';

function App(){
  return(
   <LoginForm/>
  );
}
export default App;
----------
************************
import express from 'express';

const app = express();
const port = 3001;

app.use(express.json()); // Middleware to parse JSON body

// In-memory user array
const users = [
  { id: 1, name: 'jude', email: 'jude@hotmail.com' },
  { id: 2, name: 'carlo', email: 'carlo@yahoo.com' }
];

// GET all users
app.get('/user', (req, res) => {
  res.json(users);
});

// POST new user
app.post('/users', (req, res) => {
  const { name, email } = req.body;

  if (!name || !email) {
    return res.status(400).send('Name and email are required');
  }

  // Check for duplicate email
  const exists = users.find(user => user.email === email);
  if (exists) {
    return res.status(409).send('User with this email already exists');
  }

  const newUser = {
    id: users.length + 1,
    name,
    email
  };

  users.push(newUser);
  res.status(201).send(`User added: ${JSON.stringify(newUser)}`);
});

// PUT (update) user by ID
app.put('/users/:id', (req, res) => {
  const userId = parseInt(req.params.id);
  const { name, email } = req.body;

  const user = users.find(u => u.id === userId);

  if (!user) {
    return res.status(404).send('User not found');
  }

  user.name = name || user.name;
  user.email = email || user.email;

  res.send(`User updated: ${JSON.stringify(user)}`);
});

// DELETE user by ID
app.delete('/users/:id', (req, res) => {
  const userId = parseInt(req.params.id);
  const userIndex = users.findIndex(u => u.id === userId);

  if (userIndex === -1) {
    return res.status(404).send('User not found');
  }

  const deletedUser = users.splice(userIndex, 1);
  res.send(`User deleted: ${JSON.stringify(deletedUser[0])}`);
});

// Start server
app.listen(port, () => {
  console.log(`Example app listening at http://localhost:${port}`);
});
