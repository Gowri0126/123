//Threaded Binary Tree

#include<stdio.h>
#include<stdlib.h>
typedef struct Node{
    int data;
    struct Node *left, *right;
    int isThreaded;
}Node;
Node* createNode(int data)
{
    Node* newNode=(Node*)malloc(sizeof(Node));
    newNode->data=data;
    newNode->left=NULL;
    newNode->right=NULL;
    newNode->isThreaded=0;
    return newNode;
}
Node* insert(Node* root, int key)
{
    if(root==NULL)
    return createNode(key);
    if(key<root->data)
    root->left=insert(root->left,key);
    else if(key > root->data){
        if(root->right==NULL){
        Node* temp = createNode(key);
        temp->right=root->right;
        temp->isThreaded=1;
        root->right=temp;
    }
    else{
        root->right=insert(root->right,key);
    }
}
return root;
}
Node* leftmost(Node* node)
{
    while(node && node->left)
    node=node->left;
    return node;
}
void inorder(Node* root)
{
    Node* current=leftmost(root);
    while(current){
        printf("%d\t", current->data);
        if(current->isThreaded)
        current=current->right;
        else
        current=leftmost(current->right);
    }
    printf("\n");
}
int main()
{
    Node* root=NULL;
    int ch, value;
    while(1){
        printf("\nThreaded Binary Tree\n");
        printf("1.Insert Node: \n");
        printf("2.In-order Traversal: \n");
        printf("3.Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &ch);
        switch(ch)
        {
            case 1: printf("Enter value to insert: ");
                    scanf("%d", &value);
                    root=insert(root,value);
                    printf("Node inserted successfully!\n");
                    break;
                    
            case 2: printf("In-order Traversal: \n");
                    inorder(root);
                    break;
                    
            case 3: printf("Exitting\n");
                    exit(0);
                    
            default:printf("Invalid choice!\n");
        }
    }
    return 0;
}












