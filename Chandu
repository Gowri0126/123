#include <stdio.h>
#include <stdlib.h>

// Node structure for the queue
typedef struct Node {
    int data;
    struct Node* next;
} Node;

// Queue structure
typedef struct Queue {
    Node* front;
    Node* rear;
} Queue;

// Function to initialize a queue
Queue* createQueue() {
    Queue* q = (Queue*)malloc(sizeof(Queue));
    q->front = q->rear = NULL;
    return q;
}

// Function to enqueue an element
void enqueue(Queue* q, int value) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->data = value;
    newNode->next = NULL;
    if (q->rear == NULL) {
        q->front = q->rear = newNode;
        return;
    }
    q->rear->next = newNode;
    q->rear = newNode;
}

// Function to dequeue an element
int dequeue(Queue* q) {
    if (q->front == NULL) return -1; // Queue is empty
    Node* temp = q->front;
    int value = temp->data;
    q->front = q->front->next;
    if (q->front == NULL) q->rear = NULL;
    free(temp);
    return value;
}

// Function to check if the queue is empty
int isEmpty(Queue* q) {
    return (q->front == NULL);
}

// Function to merge two sorted queues into a single sorted queue
Queue* mergeSortedQueues(Queue* q1, Queue* q2) {
    Queue* mergedQueue = createQueue();

    while (!isEmpty(q1) && !isEmpty(q2)) {
        if (q1->front->data <= q2->front->data) {
            enqueue(mergedQueue, dequeue(q1));
        } else {
            enqueue(mergedQueue, dequeue(q2));
        }
    }

    // Add remaining elements from q1
    while (!isEmpty(q1)) {
        enqueue(mergedQueue, dequeue(q1));
    }

    // Add remaining elements from q2
    while (!isEmpty(q2)) {
        enqueue(mergedQueue, dequeue(q2));
    }

    return mergedQueue;
}

// Function to display a queue
void displayQueue(Queue* q) {
    Node* temp = q->front;
    while (temp != NULL) {
        printf("%d ", temp->data);
        temp = temp->next;
    }
    printf("\n");
}

// Driver program to test the functionality
int main() {
    Queue* q1 = createQueue();
    Queue* q2 = createQueue();

    // Enqueue sorted elements into first queue
    enqueue(q1, 1);
    enqueue(q1, 3);
    enqueue(q1, 5);
    enqueue(q1, 7);

    // Enqueue sorted elements into second queue
    enqueue(q2, 2);
    enqueue(q2, 4);
    enqueue(q2, 6);
    enqueue(q2, 8);

    printf("Queue 1: ");
    displayQueue(q1);

    printf("Queue 2: ");
    displayQueue(q2);

    // Merge both sorted queues
    Queue* mergedQueue = mergeSortedQueues(q1, q2);

    printf("Merged Queue: ");
    displayQueue(mergedQueue);

    return 0;
}
